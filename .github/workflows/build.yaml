name: Build linetrace_control

on:
  pull_request:
    branches:
      - main
    paths:
      - 'linetrace_control/**'
      - 'teleop_key/**'
    types:
      - opened
      - reopend
      - syncronize
      - closed

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      linetrace_control: ${{ steps.filter.outputs.linetrace_control }}
      teleop_key: ${{ steps.filter.outputs.teleop_key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check change files
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            linetrace_control:
              - 'linetrace_control/**'
            teleop_key:
              - 'teleop_key/**'

  build_linetrace_control:
    needs: changes
    if: ${{ needs.changes.outputs.linetrace_control == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      push_docker_image: ${{ steps.push_docker_image.outcome }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        uses: docker/login-action@v2
        with:
          registry: 964246069091.dkr.ecr.us-east-1.amazonaws.com

      - name: Build image
        if: github.event.pull_request.merged == false
        uses: docker/build-push-action@v3
        with:
          push: false
          context: ./linetrace_control

      - name: Build, tag, and push image to Amazon ECR
        id: push_docker_image
        if: github.event.pull_request.merged == true
        uses: docker/build-push-action@v3
        with:
          push: true
          context: ./linetrace_control
          tags: 964246069091.dkr.ecr.us-east-1.amazonaws.com/linetrace_control:${{ github.sha }}

  build_teleop_key:
    needs: changes
    if: ${{ needs.changes.outputs.teleop_key == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      push_docker_image: ${{ steps.push_docker_image.outcome }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        uses: docker/login-action@v2
        with:
          registry: 964246069091.dkr.ecr.us-east-1.amazonaws.com

      - name: Build image
        if: github.event.pull_request.merged == false
        uses: docker/build-push-action@v3
        with:
          push: false
          context: ./teleop_key

      - name: Build, tag, and push image to Amazon ECR
        id: push_docker_image
        if: github.event.pull_request.merged == true
        uses: docker/build-push-action@v3
        with:
          push: true
          context: ./teleop_key
          tags: 964246069091.dkr.ecr.us-east-1.amazonaws.com/teleop_key:${{ github.sha }}

  update_config:
    needs: 
      - build_linetrace_control
      - build_teleop_key
    if: |
      always() &&
      (needs.build_linetrace_control.outputs.push_docker_image == 'success' ||
       needs.build_teleop_key.outputs.push_docker_image == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Setup jq
        run: |
          mkdir -p ${{ github.workspace }}/bin
          wget -O ${{ github.workspace }}/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
          echo ${{ github.workspace }}/bin >> $GITHUB_PATH

      - name: Create payload
        id: payload
        run: |
          json='{}'
          if [ ${{ needs.build_linetrace_control.outputs.push_docker_image }} == success ]; then
            json=`echo $json | jq '. + { "linetrace_control" : "${{ github.sha }}" }'`
          fi
          if [ ${{ needs.build_teleop_key.outputs.push_docker_image }} == success ]; then
            json=`echo $json | jq '. + { "teleop_key" : "${{ github.sha }}" }'`
          fi
          echo "result=`echo $json`" >> $GITHUB_OUTPUT

      - name: Dispatch integration repository workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GH_REPO_ACCESS_TOKEN }}
          repository: https://github.com/exmotion-rd/tello_linetrace_integration
          event-type: update_config
          client-payload: ${{ steps.payload.outputs.result }}
